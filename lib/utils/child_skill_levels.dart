import 'dart:convert';

import 'package:shared_preferences/shared_preferences.dart';

import 'log.dart';

// Define the skills as a nested map.
final Map<int, Map<String, List<String>>> skillLevels = {
  5: {
    'Cognitive Development': [
      'Language Acquisition: Enhance vocabulary and grammatical skills through interactive storytelling.',
      'Basic Concepts Recognition: Recognize and name colors, shapes, and objects with visual aids.',
      'Emotional Recognition: Identify various emotions through stories and images.'
    ],
    'Learning Skills': [
      'Listening and Comprehension: Improve listening skills through interactive games and story sessions.',
      'Early Literacy: Language models read aloud, highlight text, and explain words for reading introduction.'
    ]
  },
  8: {
    'Cognitive Development': [
      'Reading Fluency: Assist with reading aloud, providing feedback on pronunciation and fluency.',
      'Math Basics: Teach basic math concepts like addition, subtraction, and geometry with visual aids.',
      'Problem Solving: Develop critical thinking through interactive problem-solving tasks.'
    ],
    'Learning Skills': [
      'Creative Writing: Inspire writing and storytelling through prompts generated by LLMs.',
      'Information Retrieval: Foster basic research skills, teaching how to ask questions and receive accurate information.'
    ]
  },
  11: {
    'Cognitive Development': [
      'Advanced Reading and Comprehension: Analyze texts, summarize information, and clarify complex topics.',
      'Scientific Concepts: Illustrate concepts like the water cycle, plant life cycles through visuals and text.',
      'Cultural Awareness: Introduce different cultures and languages, broadening worldview.'
    ],
    'Learning Skills': [
      'Logical Reasoning: Develop reasoning with logical puzzles and problems.',
      'Project-Based Learning: Guide research, planning, and presentation of various projects.'
    ]
  },
  99: {
    'Cognitive Development': [
      'Abstract Thinking: Introduce and explain abstract concepts in algebra, science, and literature.',
      'Critical Analysis: Analyze texts and media critically with AI-driven discussion prompts and tools.',
      'Ethics and Responsibility: Discuss ethical scenarios like fairness or privacy.'
    ],
    'Learning Skills': [
      'Advanced Research: Conduct sophisticated research for papers and projects.',
      'Collaborative Learning: Facilitate collaborative projects, solving problems and creating presentations.'
    ]
  }
};

String getSkillsText(int age) {
  // Determine the appropriate age group.
  int key = skillLevels.keys.firstWhere((k) => age <= k, orElse: () => 99);
  Map<String, List<String>> skills = skillLevels[key]!;

  // Convert to Markdown formatted string if needed, or use as is for storage.
  return skills.entries.map((e) {
    String section = '### ${e.key}:\n';
    String items = e.value.map((item) => '- **${item.split(': ')[0]}:** ${item.split(': ')[1]}').join('\n');
    return '$section$items\n\n';
  }).join();
}

String getSkillsTextPlain(int age) {
  // Determine the appropriate age group.
  int key = skillLevels.keys.firstWhere((k) => age <= k, orElse: () => 99);
  Map<String, List<String>> skills = skillLevels[key]!;

  // Convert the skills to plain text, separated by newlines.
  return skills.entries.map((e) {
    String section = '${e.key}:\n';
    String items = e.value.map((item) => '${item.split(': ')[0]}: ${item.split(': ')[1]}').join('\n');
    return '$section$items\n';
  }).join('\n');
}


// Example usage for saving to SharedPreferences
Future<void> saveSkillsToPreferences(int age) async {
  SharedPreferences prefs = await SharedPreferences.getInstance();
  String skillsJson = json.encode(skillLevels);
  await prefs.setString('skillsData', skillsJson);

  // Retrieve and format the skills text
  String formattedSkills = getSkillsText(age);
  Log.d(formattedSkills);
}